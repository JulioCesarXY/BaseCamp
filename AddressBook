// SPDX-License-Identifier: MIT
pragma solidity ^0.8.8;

import "@openzeppelin/contracts/access/Ownable.sol";

contract AddressBook is Ownable(msg.sender) {
    // Define privado salt valor para uso interno
    string private salt = "value"; 

    // Define a estrutura para representar o contato
    struct Contact {
        uint id; // Unico identificador do contato
        string firstName; // Primeiro nome do contato
        string lastName; // Ultimo nome do contato
        uint[] phoneNumbers; // Array para gravar multiplos numeros de contatos
    }

    // Array para gravar todos os contatos
    Contact[] private contacts;

    // Mapping para gravar index de cada contato na lista array usando ID
    mapping(uint => uint) private idToIndex;

    // Variavel para acompanhar o ID do proximo contato
    uint private nextId = 1;

    // Customiza erro para quando o contato nao encontrado
    error ContactNotFound(uint id);

    // Funcao para adicionar novo contato
    function addContact(string calldata firstName, string calldata lastName, uint[] calldata phoneNumbers) external onlyOwner {
        // Crie um novo contato com os detalhes fornecidos e adicione-o aos contatos array
        contacts.push(Contact(nextId, firstName, lastName, phoneNumbers));
        // Mapeie o ID do novo contato para seu indice no array
        idToIndex[nextId] = contacts.length - 1;
        // Incrementar o nextId para o prÃ³ximo contato
        nextId++;
    }

    // Funcao para excluir um contato pelo seu ID
    function deleteContact(uint id) external onlyOwner {
        // Obtenha o index do contato a ser excluido
        uint index = idToIndex[id];
        // Verifique se o index esta valido e se existe o contato com o ID fornecido
        if (index >= contacts.length || contacts[index].id != id) revert ContactNotFound(id);

        // Substitua o contato a ser excluido pelo ultimo contato da array
        contacts[index] = contacts[contacts.length - 1];
        // Atualizar o mapeamento do index do contato movido
        idToIndex[contacts[index].id] = index;
        // Remova o ultimo contato do array
        contacts.pop();
        // Exclua a entrada de mapeamento do ID de contato excluido
        delete idToIndex[id];
    }

    // Funcao para recuperar um contato pelo seu ID
    function getContact(uint id) external view returns (Contact memory) {
        // pegue o index do contato
        uint index = idToIndex[id];
        // Verifique se o indice esta valido e se existe o contato com o ID fornecido
        if (index >= contacts.length || contacts[index].id != id) revert ContactNotFound(id);
        // Retorna os detalhes do contato
        return contacts[index];
    }

    // Funcao para recuperar todos os contatos
    function getAllContacts() external view returns (Contact[] memory) {
        // Devolver o array de todos os contatos
        return contacts;
    }
}
